---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	
	<main>
		<div id="three-container" class="w-120 h-120"></div>
	</main>
</Layout>


<script is:inline type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

const container = document.querySelector('#three-container')
console.log(container);
// 创建场景、相机和渲染器
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(container.clientWidth, container.clientHeight);
container.appendChild(renderer.domElement);
// 创建轨道控制器
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // 启用阻尼效果
controls.dampingFactor = 0.05; // 阻尼系数
// 创建粒子几何体

const particles = new THREE.BufferGeometry();
const positions = [];

for (let i = 0; i < 500; i++) {
    const vertex = new THREE.Vector3();
    vertex.x = Math.random() * 2 - 1;
    vertex.y = Math.random() * 2 - 1;
    vertex.z = Math.random() * 2 - 1;
    vertex.normalize();
    vertex.multiplyScalar(5);
    positions.push(vertex.x, vertex.y, vertex.z);
}

particles.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));

// 创建粒子材质
const material = new THREE.PointsMaterial({
    color: 'green',
    size: 0.1,
});

// 创建粒子系统
const particleSystem = new THREE.Points(particles, material);
scene.add(particleSystem);

camera.position.z = 15;

// 动画循环
function animate() {
    requestAnimationFrame(animate);

    particleSystem.rotation.x += 0.001;
    particleSystem.rotation.y += 0.002;

    renderer.render(scene, camera);
}

animate();
</script>