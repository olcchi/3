---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	
	<main class="w-20">
		<div id="three-container"></div>
	</main>
</Layout>


<script is:inline type="module">
	import * as THREE from 'three';
	import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        // 创建场景
        const scene = new THREE.Scene();

        // 创建相机
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 5, 10);

        // 创建渲染器并启用阴影
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true; // 启用阴影
        document.body.appendChild(renderer.domElement);

        // 创建一个立方体
        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshStandardMaterial({ color: 'yellow' });
        const cube = new THREE.Mesh(geometry, material);
        cube.castShadow = true; // 允许立方体投射阴影
        scene.add(cube);

        // 创建一个平面作为地面
        const planeGeometry = new THREE.PlaneGeometry(20, 20);
        const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });
        const plane = new THREE.Mesh(planeGeometry, planeMaterial);
        plane.rotation.x = -Math.PI / 2;
        plane.position.y = -0.6;
        plane.receiveShadow = true; // 允许平面接收阴影
        scene.add(plane);

        // 创建一个点光源并启用阴影
        const light = new THREE.PointLight('red', 1000, 1000);
        light.position.set(5, 10, 5);
        light.castShadow = true; // 允许光源投射阴影
        scene.add(light);

        // 设置阴影属性
        light.shadow.mapSize.width = 1024;
        light.shadow.mapSize.height = 1024;
        light.shadow.camera.near = 0.5;
        light.shadow.camera.far = 500;

        // 创建轨道控制器
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; // 启用阻尼效果
        controls.dampingFactor = 0.05; // 阻尼系数

        // 添加环境光以确保场景中有足够的光线
        const ambientLight = new THREE.AmbientLight(0x404040); // 环境光
        scene.add(ambientLight);

        // 渲染循环
        function animate() {
            requestAnimationFrame(animate);

            // 更新轨道控制器
            controls.update();

            renderer.render(scene, camera);
        }

        animate();

        // 处理窗口大小调整
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
</script>